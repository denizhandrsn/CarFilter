// <auto-generated />
using DataAccess.Concrete.EntityFrameWork;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(CarFilterContext))]
    [Migration("20241213194120_CarFilterDBv5")]
    partial class CarFilterDBv5
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Concrete.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CarDetailId")
                        .HasColumnType("int");

                    b.Property<string>("Generation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CarDetailId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("Entities.Concrete.CarComfortDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AirConditioning")
                        .HasColumnType("bit");

                    b.Property<bool>("CentralDoorLock")
                        .HasColumnType("bit");

                    b.Property<bool>("ControlCircut")
                        .HasColumnType("bit");

                    b.Property<bool>("CruiseControl")
                        .HasColumnType("bit");

                    b.Property<bool>("ElectricWindowsBack")
                        .HasColumnType("bit");

                    b.Property<bool>("ElectricWindowsFront")
                        .HasColumnType("bit");

                    b.Property<bool>("KeylessEntry")
                        .HasColumnType("bit");

                    b.Property<bool>("ParkingMachine")
                        .HasColumnType("bit");

                    b.Property<bool>("ParkingSensors")
                        .HasColumnType("bit");

                    b.Property<bool>("PowerSteering")
                        .HasColumnType("bit");

                    b.Property<bool>("ReverseCamera")
                        .HasColumnType("bit");

                    b.Property<bool>("StartButton")
                        .HasColumnType("bit");

                    b.Property<bool>("StartStopSystem")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("CarComfortDetails");
                });

            modelBuilder.Entity("Entities.Concrete.CarDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CarComfortDetailId")
                        .HasColumnType("int");

                    b.Property<int>("CarExteriorDetailId")
                        .HasColumnType("int");

                    b.Property<int>("CarGeneralDetailId")
                        .HasColumnType("int");

                    b.Property<int>("CarInteriorDetailId")
                        .HasColumnType("int");

                    b.Property<int>("CarPerformanceDetailId")
                        .HasColumnType("int");

                    b.Property<int>("CarSafetyDetailId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarComfortDetailId");

                    b.HasIndex("CarExteriorDetailId");

                    b.HasIndex("CarGeneralDetailId");

                    b.HasIndex("CarInteriorDetailId");

                    b.HasIndex("CarPerformanceDetailId");

                    b.HasIndex("CarSafetyDetailId");

                    b.ToTable("CarDetails");
                });

            modelBuilder.Entity("Entities.Concrete.CarExteriorDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AlloyWheels")
                        .HasColumnType("bit");

                    b.Property<bool>("BurglarAlarm")
                        .HasColumnType("bit");

                    b.Property<bool>("DayLights")
                        .HasColumnType("bit");

                    b.Property<bool>("ElectricMirrors")
                        .HasColumnType("bit");

                    b.Property<bool>("FoldingExteriorMirrors")
                        .HasColumnType("bit");

                    b.Property<bool>("FrontFogLights")
                        .HasColumnType("bit");

                    b.Property<bool>("HeadlampWasher")
                        .HasColumnType("bit");

                    b.Property<bool>("IntervalWiper")
                        .HasColumnType("bit");

                    b.Property<bool>("LedHeahlights")
                        .HasColumnType("bit");

                    b.Property<bool>("LedRearLighting")
                        .HasColumnType("bit");

                    b.Property<bool>("MettalicPaint")
                        .HasColumnType("bit");

                    b.Property<bool>("PaintedBumpers")
                        .HasColumnType("bit");

                    b.Property<bool>("PanoramicRoof")
                        .HasColumnType("bit");

                    b.Property<bool>("RainSensor")
                        .HasColumnType("bit");

                    b.Property<bool>("RearPrivacyGlass")
                        .HasColumnType("bit");

                    b.Property<bool>("RoofRails")
                        .HasColumnType("bit");

                    b.Property<bool>("SunRoof")
                        .HasColumnType("bit");

                    b.Property<bool>("TintedGlass")
                        .HasColumnType("bit");

                    b.Property<bool>("XenonHeadLights")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("CarExteriorDetails");
                });

            modelBuilder.Entity("Entities.Concrete.CarGeneralDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BodyType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CargoCapacity")
                        .HasColumnType("int");

                    b.Property<string>("DriveWheel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EngineCapacity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FuelTankCapacity")
                        .HasColumnType("int");

                    b.Property<string>("FuelType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HorsePower")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfSeats")
                        .HasColumnType("int");

                    b.Property<string>("Segment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Torque")
                        .HasColumnType("int");

                    b.Property<string>("Transmission")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Turbo")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("CarGeneralDetails");
                });

            modelBuilder.Entity("Entities.Concrete.CarInteriorDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AdjustableDashboardLighting")
                        .HasColumnType("bit");

                    b.Property<bool>("AdjustableSteeringWheel")
                        .HasColumnType("bit");

                    b.Property<string>("AudioInput")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AudioSystem")
                        .HasColumnType("bit");

                    b.Property<int>("Bluetooth")
                        .HasColumnType("int");

                    b.Property<bool>("BoardComputer")
                        .HasColumnType("bit");

                    b.Property<bool>("CentralArmRest")
                        .HasColumnType("bit");

                    b.Property<bool>("CoolantTemperatureGauge")
                        .HasColumnType("bit");

                    b.Property<bool>("DayCounter")
                        .HasColumnType("bit");

                    b.Property<bool>("DigitalRadio")
                        .HasColumnType("bit");

                    b.Property<bool>("ElectricAdjustmentSeat")
                        .HasColumnType("bit");

                    b.Property<bool>("FoldingRearSeat")
                        .HasColumnType("bit");

                    b.Property<bool>("HeatedSeats")
                        .HasColumnType("bit");

                    b.Property<bool>("HeatedSteeringWheel")
                        .HasColumnType("bit");

                    b.Property<bool>("HeightAdjustmentSeat")
                        .HasColumnType("bit");

                    b.Property<bool>("MakeUpMirror")
                        .HasColumnType("bit");

                    b.Property<int>("NavigationSystem")
                        .HasColumnType("int");

                    b.Property<bool>("OutsiteTemperatureGauge")
                        .HasColumnType("bit");

                    b.Property<bool>("RearHeadrest")
                        .HasColumnType("bit");

                    b.Property<bool>("SlidingRearSeat")
                        .HasColumnType("bit");

                    b.Property<bool>("SportsSeat")
                        .HasColumnType("bit");

                    b.Property<bool>("Tachometer")
                        .HasColumnType("bit");

                    b.Property<bool>("VentilatedSeats")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("CarInteriorDetails");
                });

            modelBuilder.Entity("Entities.Concrete.CarPerformanceDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Acceleration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BatteryRange")
                        .HasColumnType("int");

                    b.Property<string>("Emmision")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PowerConsumption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TopSpeed")
                        .HasColumnType("int");

                    b.Property<string>("UrbanConsumption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CarPerformanceDetails");
                });

            modelBuilder.Entity("Entities.Concrete.CarSafetyDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("ABS")
                        .HasColumnType("bit");

                    b.Property<bool>("AutomaticLevelControl")
                        .HasColumnType("bit");

                    b.Property<bool>("BlindSpotAssist")
                        .HasColumnType("bit");

                    b.Property<bool>("BrakeAssist")
                        .HasColumnType("bit");

                    b.Property<bool>("CollisionWarningSystem")
                        .HasColumnType("bit");

                    b.Property<bool>("DriverAirbag")
                        .HasColumnType("bit");

                    b.Property<bool>("EmergencyBraking")
                        .HasColumnType("bit");

                    b.Property<bool>("FatigueSensor")
                        .HasColumnType("bit");

                    b.Property<bool>("HeadAirbag")
                        .HasColumnType("bit");

                    b.Property<bool>("KneeAirbag")
                        .HasColumnType("bit");

                    b.Property<bool>("LaneAirbag")
                        .HasColumnType("bit");

                    b.Property<bool>("PassangerAirbag")
                        .HasColumnType("bit");

                    b.Property<bool>("SideAirbag")
                        .HasColumnType("bit");

                    b.Property<bool>("StabilityControl")
                        .HasColumnType("bit");

                    b.Property<bool>("TirePressureSensor")
                        .HasColumnType("bit");

                    b.Property<bool>("TractionControl")
                        .HasColumnType("bit");

                    b.Property<bool>("TrafficSignRecognition")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("CarSafetyDetails");
                });

            modelBuilder.Entity("Entities.Concrete.Car", b =>
                {
                    b.HasOne("Entities.Concrete.CarDetail", "CarDetail")
                        .WithMany()
                        .HasForeignKey("CarDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarDetail");
                });

            modelBuilder.Entity("Entities.Concrete.CarDetail", b =>
                {
                    b.HasOne("Entities.Concrete.CarComfortDetail", "CarComfortDetail")
                        .WithMany()
                        .HasForeignKey("CarComfortDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.CarExteriorDetail", "CarExteriorDetail")
                        .WithMany()
                        .HasForeignKey("CarExteriorDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.CarGeneralDetail", "CarGeneralDetail")
                        .WithMany()
                        .HasForeignKey("CarGeneralDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.CarInteriorDetail", "CarInteriorDetail")
                        .WithMany()
                        .HasForeignKey("CarInteriorDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.CarPerformanceDetail", "CarPerformanceDetail")
                        .WithMany()
                        .HasForeignKey("CarPerformanceDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.CarSafetyDetail", "CarSafetyDetail")
                        .WithMany()
                        .HasForeignKey("CarSafetyDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarComfortDetail");

                    b.Navigation("CarExteriorDetail");

                    b.Navigation("CarGeneralDetail");

                    b.Navigation("CarInteriorDetail");

                    b.Navigation("CarPerformanceDetail");

                    b.Navigation("CarSafetyDetail");
                });
#pragma warning restore 612, 618
        }
    }
}
